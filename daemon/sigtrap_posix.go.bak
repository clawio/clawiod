// +build !windows

package daemon

import (
	"io/ioutil"
	"os"
	"os/signal"
	"syscall"

	"github.com/Sirupsen/logrus"
)

// trapSignalsPosix captures POSIX-only signals.
func trapSignalsPosix() {
	go func() {
		sigchan := make(chan os.Signal, 1)
		signal.Notify(sigchan, syscall.SIGTERM, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGUSR1)

		for sig := range sigchan {
			switch sig {
			case syscall.SIGTERM:
				logrus.Infoln("SIGTERM: Terminating process")
				os.Exit(0)

			case syscall.SIGQUIT:
				logrus.Infoln("SIGQUIT: Shutting down")
				exitCode := 0
				err := Stop()
				if err != nil {
					logrus.Errorf("SIGQUIT stop: %v", err)
					exitCode = 1
				}
				os.Exit(exitCode)

			case syscall.SIGHUP:
				logrus.Infoln("SIGHUP: Hanging up")
				err := Stop()
				if err != nil {
					logrus.Infof("SIGHUP stop: %v", err)
				}

			case syscall.SIGUSR1:
				logrus.Infoln("SIGUSR1: Reloading configuration")

				var updatedConfigFile ConfigFile

				configFileMux.Lock()
				if configFile == nil {
					// Hmm, did spawing process forget to close stdin? Anyhow, this is unusual.
					logrus.Infoln("[ERROR] SIGUSR1: no ConfigFile to reload (was stdin left open?)")
					configFileMux.Unlock()
					continue
				}
				if configFile.IsFile() {
					body, err := ioutil.ReadFile(configFile.Path())
					if err == nil {
						updatedConfigFile = ClawIOConfigFile{
							Filepath: configFile.Path(),
							Contents: body,
							RealFile: true,
						}
					}
				}
				configFileMux.Unlock()

				err := Restart(updatedConfigFile)
				if err != nil {
					logrus.Errorf("SIGUSR1: %v", err)
				}
			}
		}
	}()
}
