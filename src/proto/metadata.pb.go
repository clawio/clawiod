// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MkdirRequest struct {
	Path      string     `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Opaque    string     `protobuf:"bytes,2,opt,name=opaque" json:"opaque,omitempty"`
	SecEntity *SecEntity `protobuf:"bytes,3,opt,name=sec_entity" json:"sec_entity,omitempty"`
}

func (m *MkdirRequest) Reset()                    { *m = MkdirRequest{} }
func (m *MkdirRequest) String() string            { return proto1.CompactTextString(m) }
func (*MkdirRequest) ProtoMessage()               {}
func (*MkdirRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MkdirRequest) GetSecEntity() *SecEntity {
	if m != nil {
		return m.SecEntity
	}
	return nil
}

type MkdirResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *MkdirResponse) Reset()                    { *m = MkdirResponse{} }
func (m *MkdirResponse) String() string            { return proto1.CompactTextString(m) }
func (*MkdirResponse) ProtoMessage()               {}
func (*MkdirResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *MkdirResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type CopyRequest struct {
	SourcePath string     `protobuf:"bytes,1,opt,name=source_path" json:"source_path,omitempty"`
	TargetPath string     `protobuf:"bytes,2,opt,name=target_path" json:"target_path,omitempty"`
	SecEntity  *SecEntity `protobuf:"bytes,3,opt,name=sec_entity" json:"sec_entity,omitempty"`
}

func (m *CopyRequest) Reset()                    { *m = CopyRequest{} }
func (m *CopyRequest) String() string            { return proto1.CompactTextString(m) }
func (*CopyRequest) ProtoMessage()               {}
func (*CopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CopyRequest) GetSecEntity() *SecEntity {
	if m != nil {
		return m.SecEntity
	}
	return nil
}

type CopyResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *CopyResponse) Reset()                    { *m = CopyResponse{} }
func (m *CopyResponse) String() string            { return proto1.CompactTextString(m) }
func (*CopyResponse) ProtoMessage()               {}
func (*CopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CopyResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MoveRequest struct {
	SourcePath string     `protobuf:"bytes,1,opt,name=source_path" json:"source_path,omitempty"`
	TargetPath string     `protobuf:"bytes,2,opt,name=target_path" json:"target_path,omitempty"`
	SecEntity  *SecEntity `protobuf:"bytes,3,opt,name=sec_entity" json:"sec_entity,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto1.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *MoveRequest) GetSecEntity() *SecEntity {
	if m != nil {
		return m.SecEntity
	}
	return nil
}

type MoveResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto1.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *MoveResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RemoveRequest struct {
	Path      string     `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	SecEntity *SecEntity `protobuf:"bytes,2,opt,name=sec_entity" json:"sec_entity,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *RemoveRequest) GetSecEntity() *SecEntity {
	if m != nil {
		return m.SecEntity
	}
	return nil
}

type RemoveResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *RemoveResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type StatRequest struct {
	Path      string     `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Children  bool       `protobuf:"varint,2,opt,name=children" json:"children,omitempty"`
	SecEntity *SecEntity `protobuf:"bytes,3,opt,name=sec_entity" json:"sec_entity,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *StatRequest) GetSecEntity() *SecEntity {
	if m != nil {
		return m.SecEntity
	}
	return nil
}

type StatResponse struct {
	MetaDataInfo *MetaDataInfo `protobuf:"bytes,1,opt,name=meta_data_info" json:"meta_data_info,omitempty"`
	Error        *Error        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *StatResponse) Reset()                    { *m = StatResponse{} }
func (m *StatResponse) String() string            { return proto1.CompactTextString(m) }
func (*StatResponse) ProtoMessage()               {}
func (*StatResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *StatResponse) GetMetaDataInfo() *MetaDataInfo {
	if m != nil {
		return m.MetaDataInfo
	}
	return nil
}

func (m *StatResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MetaDataInfo struct {
	Fid         int64           `protobuf:"varint,1,opt,name=fid" json:"fid,omitempty"`
	Path        string          `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Directory   bool            `protobuf:"varint,3,opt,name=directory" json:"directory,omitempty"`
	Size        int64           `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Mtime       int64           `protobuf:"varint,5,opt,name=mtime" json:"mtime,omitempty"`
	Xstype      string          `protobuf:"bytes,6,opt,name=xstype" json:"xstype,omitempty"`
	Xs          string          `protobuf:"bytes,7,opt,name=xs" json:"xs,omitempty"`
	Etag        string          `protobuf:"bytes,8,opt,name=etag" json:"etag,omitempty"`
	Permissions int64           `protobuf:"varint,9,opt,name=permissions" json:"permissions,omitempty"`
	Children    []*MetaDataInfo `protobuf:"bytes,10,rep,name=children" json:"children,omitempty"`
}

func (m *MetaDataInfo) Reset()                    { *m = MetaDataInfo{} }
func (m *MetaDataInfo) String() string            { return proto1.CompactTextString(m) }
func (*MetaDataInfo) ProtoMessage()               {}
func (*MetaDataInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *MetaDataInfo) GetChildren() []*MetaDataInfo {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto1.RegisterType((*MkdirRequest)(nil), "proto.MkdirRequest")
	proto1.RegisterType((*MkdirResponse)(nil), "proto.MkdirResponse")
	proto1.RegisterType((*CopyRequest)(nil), "proto.CopyRequest")
	proto1.RegisterType((*CopyResponse)(nil), "proto.CopyResponse")
	proto1.RegisterType((*MoveRequest)(nil), "proto.MoveRequest")
	proto1.RegisterType((*MoveResponse)(nil), "proto.MoveResponse")
	proto1.RegisterType((*RemoveRequest)(nil), "proto.RemoveRequest")
	proto1.RegisterType((*RemoveResponse)(nil), "proto.RemoveResponse")
	proto1.RegisterType((*StatRequest)(nil), "proto.StatRequest")
	proto1.RegisterType((*StatResponse)(nil), "proto.StatResponse")
	proto1.RegisterType((*MetaDataInfo)(nil), "proto.MetaDataInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MetaData service

type MetaDataClient interface {
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type metaDataClient struct {
	cc *grpc.ClientConn
}

func NewMetaDataClient(cc *grpc.ClientConn) MetaDataClient {
	return &metaDataClient{cc}
}

func (c *metaDataClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := grpc.Invoke(ctx, "/proto.MetaData/Mkdir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaDataClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := grpc.Invoke(ctx, "/proto.MetaData/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaDataClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/proto.MetaData/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaDataClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/proto.MetaData/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaDataClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := grpc.Invoke(ctx, "/proto.MetaData/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaData service

type MetaDataServer interface {
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	Remove(context.Context, *RemoveRequest) (*MoveResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
}

func RegisterMetaDataServer(s *grpc.Server, srv MetaDataServer) {
	s.RegisterService(&_MetaData_serviceDesc, srv)
}

func _MetaData_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaData/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaData_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaData/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaData_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaData/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaData_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaData/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaData_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaData/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetaData",
	HandlerType: (*MetaDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mkdir",
			Handler:    _MetaData_Mkdir_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _MetaData_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _MetaData_Move_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MetaData_Remove_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _MetaData_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto1.RegisterFile("metadata.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0xd5, 0x34, 0x09, 0xe9, 0x97, 0xb4, 0x0c, 0x97, 0x83, 0x55, 0x2e, 0x55, 0x05, 0xd2,
	0xa4, 0xc1, 0x26, 0x75, 0x3f, 0x61, 0xec, 0xc0, 0xa1, 0x97, 0xf6, 0xc2, 0x05, 0x55, 0x26, 0xf9,
	0xba, 0x59, 0x90, 0x38, 0xb3, 0xbf, 0xa2, 0x95, 0x1f, 0xc0, 0xdf, 0xe2, 0xaf, 0xa1, 0xd8, 0x49,
	0x96, 0x48, 0x9d, 0x54, 0x0e, 0x3b, 0xb5, 0x79, 0xe3, 0xf7, 0xfd, 0x9e, 0xd8, 0xaf, 0x61, 0x92,
	0x23, 0x89, 0x4c, 0x90, 0xb8, 0x2c, 0xb5, 0x22, 0xc5, 0x02, 0xfb, 0x33, 0x8b, 0x51, 0x6b, 0xa5,
	0x9d, 0x36, 0x7b, 0x6d, 0x30, 0xc5, 0x82, 0x24, 0x1d, 0x9c, 0xb0, 0x58, 0x43, 0xb2, 0xfa, 0x91,
	0x49, 0xbd, 0xc6, 0x87, 0x3d, 0x1a, 0x62, 0x09, 0xf8, 0xa5, 0xa0, 0x7b, 0x3e, 0x98, 0x0f, 0xce,
	0x47, 0x6c, 0x02, 0xa1, 0x2a, 0xc5, 0xc3, 0x1e, 0xb9, 0x67, 0x9f, 0xdf, 0x03, 0x18, 0x4c, 0xb7,
	0x2e, 0x81, 0x0f, 0xe7, 0x83, 0xf3, 0x78, 0x79, 0xe6, 0x92, 0x2e, 0x37, 0x98, 0xde, 0x5a, 0x7d,
	0xf1, 0x11, 0xc6, 0x75, 0xa6, 0x29, 0x55, 0x61, 0x90, 0xbd, 0x83, 0xc0, 0x42, 0xd8, 0xd4, 0x78,
	0x99, 0xd4, 0x8e, 0xdb, 0x4a, 0x5b, 0x7c, 0x83, 0xf8, 0x46, 0x95, 0x87, 0x06, 0x60, 0x0a, 0xb1,
	0x51, 0x7b, 0x9d, 0xe2, 0xb6, 0xc3, 0x31, 0x85, 0x98, 0x84, 0xbe, 0x43, 0x72, 0xe2, 0xff, 0xc0,
	0x5c, 0x40, 0xe2, 0xe2, 0x4f, 0x64, 0x59, 0xa9, 0x5f, 0xf8, 0x82, 0x2c, 0x2e, 0xfe, 0x14, 0x96,
	0x1b, 0x18, 0xaf, 0x31, 0xef, 0xd0, 0xf4, 0x8f, 0xa6, 0x3f, 0xd1, 0x7b, 0x66, 0xe2, 0x27, 0x98,
	0x34, 0x21, 0xa7, 0xcc, 0xdc, 0x40, 0xbc, 0x21, 0x41, 0xc7, 0x27, 0x9e, 0x41, 0x94, 0xde, 0xcb,
	0x9f, 0x99, 0xc6, 0xc2, 0xce, 0x8b, 0x4e, 0xfc, 0xea, 0xaf, 0x90, 0xb8, 0xd0, 0x9a, 0xe0, 0xc2,
	0x35, 0x75, 0x5b, 0x55, 0x75, 0x2b, 0x8b, 0x9d, 0xaa, 0x51, 0xa6, 0xb5, 0x73, 0x85, 0x24, 0x3e,
	0x0b, 0x12, 0x5f, 0x8a, 0x9d, 0x7a, 0xc2, 0xf5, 0x8e, 0xe0, 0xfe, 0x1d, 0x40, 0xd2, 0x5b, 0x1d,
	0xc3, 0x70, 0x27, 0x33, 0x9b, 0x37, 0x6c, 0xe9, 0xdd, 0x09, 0xbd, 0x81, 0x51, 0x26, 0x35, 0xa6,
	0xa4, 0xb4, 0x43, 0x8d, 0xaa, 0x05, 0x46, 0xfe, 0x46, 0xee, 0xdb, 0xe5, 0x63, 0x08, 0x72, 0x92,
	0x39, 0xf2, 0xc0, 0x3e, 0x4e, 0x20, 0x7c, 0x34, 0x74, 0x28, 0x91, 0x87, 0xd6, 0x0f, 0xe0, 0x3d,
	0x1a, 0xfe, 0xca, 0xfe, 0x4f, 0xc0, 0x47, 0x12, 0x77, 0x3c, 0x6a, 0x0a, 0x51, 0xa2, 0xce, 0xa5,
	0x31, 0x52, 0x15, 0x86, 0x8f, 0xac, 0xfd, 0x43, 0x67, 0xb3, 0x60, 0x3e, 0x7c, 0xe6, 0xf3, 0x96,
	0x7f, 0x3c, 0x88, 0x1a, 0x81, 0x2d, 0x21, 0xb0, 0xf7, 0x86, 0xb5, 0x4b, 0x3b, 0x37, 0x73, 0xf6,
	0xb6, 0x2f, 0xd6, 0x9b, 0x79, 0x05, 0x7e, 0x55, 0x6f, 0xc6, 0xea, 0xb7, 0x9d, 0xab, 0x34, 0x9b,
	0xf6, 0xb4, 0x27, 0x43, 0xd5, 0xc1, 0xd6, 0xd0, 0xe9, 0x7b, 0x6b, 0xe8, 0x95, 0xf4, 0x1a, 0x42,
	0x57, 0x21, 0xd6, 0x10, 0xf4, 0x6a, 0x79, 0xdc, 0x74, 0x05, 0x7e, 0x75, 0xe6, 0xed, 0x94, 0x4e,
	0xab, 0x5a, 0x43, 0xb7, 0x14, 0xdf, 0x43, 0xab, 0x5d, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0x65, 0x0a, 0xa4, 0xc5, 0x04, 0x00, 0x00,
}
