#!/bin/sh
set -e

### BEGIN INIT INFO
# Provides:           clawiod
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  Clawiod is an open-source project to easily create lightweight, portable,
#  self-sufficient containers from any application. The same container that a
#  developer builds and tests on a laptop can run at scale, in production, on
#  VMs, bare metal, OpenStack clusters, public clouds and more.
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE=$(basename $0)

# modify these in /etc/default/$BASE (/etc/default/clawiod)
CLAWIOD=/usr/bin/$BASE
# This is the pid file managed by clawiod itself
CLAWIOD_PIDFILE=/var/run/$BASE.pid
# This is the pid file created/managed by start-stop-daemon
CLAWIOD_SSD_PIDFILE=/var/run/$BASE-ssd.pid
CLAWIOD_LOGFILE=/var/log/$BASE.log
CLAWIOD_OPTS=
CLAWIOD_DESC="clawiod"
CLAWIOD_CONFIG=/etc/$BASE/$BASE.conf

# Get lsb functions
. /lib/lsb/init-functions

if [ -f /etc/default/$BASE ]; then
	. /etc/default/$BASE
fi

# Check clawiod is present
if [ ! -x $CLAWIOD ]; then
	log_failure_msg "$CLAWIOD not present or not executable"
	exit 1
fi

check_init() {
	 # see also init_is_upstart in /lib/lsb/init-functions (which isn't available in Ubuntu 12.04, or we'd use it directly)
	 if [ -x /sbin/initctl ] && /sbin/initctl version 2>/dev/null | grep -q upstart; then
                echo -n
		# log_failure_msg "$CLAWIOD_DESC is managed via upstart, try using service $BASE $1"
                # exit 1
         fi
}

fail_unless_root() {
	if [ "$(id -u)" != '0' ]; then
		log_failure_msg "$CLAWIOD_DESC must be run as root"
		exit 1
	fi
}

case "$1" in
	start)
		check_init

		fail_unless_root

		status="0"
		status_of_proc -p "$CLAWIOD_SSD_PIDFILE" "$CLAWIOD" "$CLAWIOD_DESC" > /dev/null 2>&1|| status="$?"
		if [ "$status" = 0 ]; then
			log_begin_msg "$CLAWIO_DESC is already running"
			log_end_msg "$?"
			exit 0
	    	fi



		touch "$CLAWIOD_LOGFILE"
		chown clawiod:clawiod "$CLAWIOD_LOGFILE"

		ulimit -n 1048576
		if [ "$BASH" ]; then
			ulimit -u 1048576
		else
			ulimit -p 1048576
		fi

		log_begin_msg "Starting $CLAWIOD_DESC"
		start-stop-daemon --start --background \
			--chuid "clawiod:clawiod" \
			--exec "$CLAWIOD" \
			--pidfile "$CLAWIOD_SSD_PIDFILE" \
			--make-pidfile \
			-- \
				--config "$CLAWIOD_CONFIG" \
					>> "$CLAWIOD_LOGFILE" 2>&1
		log_end_msg $?
		;;

	stop)
		check_init
		fail_unless_root
		log_begin_msg "Stopping $CLAWIOD_DESC"
		start-stop-daemon --stop --pidfile "$CLAWIOD_SSD_PIDFILE"
		log_end_msg $?
		;;

	restart)
		check_init
		fail_unless_root
		clawiod_pid=`cat "$CLAWIOD_SSD_PIDFILE" 2>/dev/null`
		[ -n "$clawiod_pid" ] \
			&& ps -p $clawiod_pid > /dev/null 2>&1 \
			&& $0 stop
		$0 start
		;;

	reload)
		check_init
		fail_unless_root
		log_begin_msg "Reloading $CLAWIOD_DESC configuration"
		start-stop-daemon --stop --signal HUP --pidfile "$CLAWIOD_SSD_PIDFILE"
		log_end_msg $?
		;;

	status)
		check_init
		status_of_proc -p "$CLAWIOD_SSD_PIDFILE" "$CLAWIOD" "$CLAWIOD_DESC"
		;;
	graceful-stop)
		check_init
		fail_unless_root

		log_begin_msg "Gracefully stopping $CLAWIOD_DESC. It can take some minutes..."
                start-stop-daemon --stop --signal QUIT --pidfile "$CLAWIOD_SSD_PIDFILE"
                log_end_msg $?
		;;


	*)
		echo "Usage: service clawiod {start|stop|restart|status|reload|graceful-stop}"
		exit 1
		;;
esac
